Executable document project


** Goal
To generate a version of Pastoll et al. 2020 in which code runs to generate the figures.

** Format
Insert code blocks into the R markdown document. Stencila will convert this document back into an eLife formatted article document.

** Notes

*** Inserted URL for the article at https://hub.stenci.la/open/ and then downloaded the R markdown document.

*** Set up a GitHub repository to contain the converted documents as well as project data and functions.

*** Insert code blocks
- Set up code block at the top of the document. This calls libraries and loads data.
- Code blocks near to figures.


** Questions

*** <2020-06-30 Tue>
- Is there a package I can use to make references compile when I knit the document?

- How best to refer to figures?
At the moment the document links to and loads an image stored in .media.

**** Option 1
Link to the code from within the figure legend. Clicking the link for a particular panel runs the code and plots a new version of the panel. The link in the text could reference the code chink rather than the figure.
Advantages: the figures are already visible without seeing code; keeping the original panel could be useful for comparison with panels generated after changing the code;  does not require all panels to be converted to code.
Disadvantages: end up with multiple versions of the same plot. The original panel may look (or be) different to the code generated panel.

**** Option 2
Link to the code from within the text. Original panels removed from the document. The link in the text would reference the code block in the same way that figures are referenced in a Bookdown document.
Advantages: only one version of each panel, code exectuable from main text
Disadvantages: delay between clicking the link and seeing the figure could be very long (would not promote readability); because many figures have multiple panels that relate to one another, it would either be necessary to click on links to each panel (E.g. Figure 1A and then Figure 1B) if you want to see both, or if one link runs code for all panels it would be necessary to wait for each panel to be generated, or there would need to be multiple links (e.g. Figure 1, and Figure 1A) or some kind of menu; formats for raw (unprocessed) data in  some figure panels are not easily loaded into or viewed in R / Python, e.g. left panels in Figure 2A-C. 


*** <2020-06-06 Sat>
- In the document generated by the Stencila converter some of the figures are shown but others are missing. I can manually add them back but I'm not sure how best to do this without breaking the formating or something else downstream when the document converts back to the publication format. Please advise.
- I see that the text for the figure legends is included as a subheading at a level below the section heading. However, this is missing for several of the figures in the converted document. Is there a fix for this that doesn't involve manually replacing it?
- Is there a model for how / where code blocks should be inserted so that they format correctly in the final document?
NB: I envisaged that you would replace the image tags for the figures with the usual Rmd code chunks. As long as the correct identifiers are used to link the figures to their caption, the parser should be able to reconstitute the structured figure.
- Will executable figures replace the original figures or be generated alongside them?
NB: They will replace them.
- How should code blocks associate with Figures and Tables? E.g. Should I add links to the main text as in the same as a standard .Rmd document? Or just leave the code blocks as standalone elements?
NB: As above, please use Bookdown convention for linking.
- Do we want to execute everything? E.g. Numbers given in the manuscript that come from analyses could be linked directly to the data they come from? Happy try this but will add to the time commitment.
NB: This is really up to you. We do support inline code chunks and it would be great to showcase that, but I understand that it wil be more work for you. Perhaps, just go for the easiest ones?
- Can I refer to analysis functions outside the R markdown document? Will 'source' work to run a .R file containing these functions? If so, should I source from the setup code block or somewhere else?
NB: Yes you can use source (obviously this will require that you upload the sourced files to the project so we can include them in the container at runtime).  There is a tradeoff however to using source in that it makes that source code less visible to the reader. So maybe the best approach is to put preparatory code in the setup block, and code relevant to generating a particular figure there.
- I'm assuming that I should refer to other files using paths relative to the directory containing the .Rmd file. Will this be ok?
NB: Yes, absolutely, they will also get included in the project so they are available at runtime.
- Should I load packages from the setup block or somewhere else? Can I source a separate initialisation script to do this?
- Is there a quick way to convert the document back to the final format so I can check things are ok as I go along?
As mentioned above, you can use Encoda for this. If you don not have Node.js installed and would prefer a standalone executable let us know and we should be able to prioritixze a new release of the Stencila CLI (which includes Encoda).
- Minor. Having the bibliography at the top of the .Rmd document is a bit annoying. Will it break things later if I move it? Can it be loaded from a separate document?
